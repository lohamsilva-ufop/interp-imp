#lang racket
(require "syntax.rkt")

(struct inputs (value) #:transparent)
(struct outputs (value) #:transparent)
(struct record (inputs outputs) #:transparent)
(define table (make-hash))

(define (insert-simbolic-table ev v)
  (hash-set!  table ev (list v)))

(define (update-simbolic-table ev v)
  (let ([old-value (hash-ref table ev)])
  (hash-set! table ev (cons v old-value))))

(define (show-table)
  (displayln table)
  (record (inputs table) (outputs null))
  (displayln (record-outputs)))

(define (show-rec)
  ;(record (inputs null) (outputs null))
  (displayln record-inputs))


(provide (all-defined-out))
